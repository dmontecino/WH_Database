# Data Dictionary {.unnumbered}


```{r table summarizing the different sources, eval=FALSE, echo=F, message=FALSE, warning=FALSE}

library(kableExtra)

data <- data.frame(
  Unit = 
    c("Source",
      "Source Record",
      "Source Record\nCarcass",
      "Source Record\nSpecimen",
      "Implications"),
  Observation_Source = 
    c("Animals y of the same group and species",
      "Animals y of the same group and species at time",
      "NA",
      "Tissues from animals y of the same group and species collected at time t",
      "Single source record per source at time t"),
  Animal_Source = 
    c("Individual Animal y",
      "Individual Animal y at time t",
      "Carcass of individual animal y collected at time t",
      "Tissue collected from individual animal y at time t",
      "Single source record per source at time t"),
  Environmental_Source = 
    c("Collection site  y with tissue of types x,w, and z",
      "Collection site y with tissue of types x,w, and z at time t",
      "NA",
      "Tissue of type x,w, or z collected from collection site y at time t",
      "Single source record per source at time t"),
  Arthropod_Source = 
    c("Collection site y",
      "Arthropods from collection site y at time t divided by species",
      "NA",
      "Arthropods collected from collection site y at time t divided by species and divided in sub-groups (“pools”)",
      "Multiple source records per source (1 by arthropod species)")
)

kable(data) |> kable_paper()


```


```{r load packages, echo=FALSE, eval=T, message=FALSE, cache=F, warning=FALSE}
#| tbl-colwidths: false



# ------------------#
# Create Dictionary #
# ------------------#

library(kableExtra)
library(tidyverse)
library(gt)
library(reactable)

# #tables in the .xml of the db diagram
# fields_by_table<-split(full_table, full_table$Table_Name)


# Example entries
# data_dictionary<-vector(mode = "list")
  
```

## Project

```{r project, echo=FALSE, eval=T, message=FALSE, cache=F}

source("dd_project.R")

project

```

## Surveillance Activity 

```{r surveillance objective, echo=FALSE, eval=T, message=FALSE, cache=F}

source("dd_surv_act.R")

surv_activity
```

## Outbreak

```{r outbreak, echo=FALSE, eval=T, message=FALSE, cache=F}

outbreak<-
  
  list(
    
    data.frame(
      Variable="OutbreakName",
      Label="Outbreak Name",
      Definition="The name provided to the outbreak",
      Type="String",
      Mandatory="Yes"),
    
    data.frame(
      Variable="OutbreakDiagnosis",
      Label="Outbreak Diagnosis",
      Definition="The diagnosis provided to the outbreak",
      Type="String",
      Mandatory="No"))

outbreak<-
  outbreak %>% bind_rows() |> 
  gt::gt() %>%
  gt::tab_options(table.font.size = 8) %>%
  gt::cols_width(Variable ~ gt::pct(22),
                 Label ~ gt::pct(20),
                 Definition ~ gt::pct(30),
                 Type~ gt::pct(13),
                 Mandatory~ gt::pct(15)) %>%
  gt::tab_style(
    style = cell_text(size = px(15), weight = "bold"),
    locations = cells_column_labels())

outbreak
```

## Field Visit

```{r field visit, echo=FALSE, eval=T, message=FALSE, cache=F}

source("dd_field_visit.R")

field_visit

```

## Location

```{r location, echo=FALSE, eval=T, message=FALSE, cache=F}

source("dd_location.R")

location

```


## Event

```{r event, echo=FALSE, eval=T, message=FALSE, cache=F}

source("dd_event.R")

event

```

## Group Source 

```{r group source, echo=FALSE, eval=T, message=FALSE, cache=F}

source("dd_surv_act_obs_source.R")

group_source

```

## Animal Source 

```{r animal source, echo=FALSE, eval=T, message=FALSE, cache=F}

source("dd_surv_act_animal_source.R")

animal_source

```

## Environmental Source

```{r environmental source, echo=FALSE, eval=T, message=FALSE, cache=F}

source("dd_surv_act_env_source.R")

env_source

```

## Arthropod Source

```{r arthropod source, echo=FALSE, eval=T, message=FALSE, cache=F}

source("dd_surv_act_arthro_source.R")

arthro_source

```

<!-- #Source record specimen -->

```{r record specimen, echo=FALSE, eval=F, message=FALSE, cache=F}

#Source record specimen
  
data_dictionary[["Source_Record_Specimen"]]<-
  
  list(    
    
    data.frame(
      Variable="WildlifeHealth_SourceRecordSpecimenID",
      Label="Specimen identifier", 
      Definition="System-provided specimen identifier",
      Type="Integer",
      Mandatory="System-assigned"), 
    
    data.frame(
      Variable="SourceRecordSpecimenCode",
      Label="Specimen code", 
      Definition="User-provided specimen code",
      Type="String",
      Mandatory="Yes"),
    
    data.frame(
      Variable="SourceRecordSpecimenCrossID",
      Label="Specimen cross identifier", 
      Definition="The identifier of the specimen under another nomenclature system",
      Type="String",
      Mandatory="No"),
    
    data.frame(
      Variable="SourceRecordSpecimenCollectedPrimaryNecropsy",
      Label="Primary Necropsy Specimen", 
      Definition="Answer to the question: 'Is the Specimen collected during the Primary Necropsy?'",
      Type="Boolean",
      Mandatory="Yes"),
    
    data.frame(
      Variable="SourceRecordSpecimenCollectedSecondaryNecropsy",
      Label="Secondary Necropsy Specimen", 
      Definition="Answer to the question: 'Is the Specimen collected during the Secondary Necropsy?'",
      Type="Boolean",
      Mandatory="Yes"),

    data.frame(
      Variable="WildlifeHealth_SourceRecordSpecimenType",
      Label="Specimen type", 
      Definition="The type of the specimen. It can be a full carcass",
      Type="Single selection",
      Mandatory="Yes"),
    
    data.frame(
      Variable="WildlifeHealth_SourceRecordSpecimenMedium",
      Label="Medium", 
      Definition="The medium in which the specimen is contained on",
      Type="Single selection",
      Mandatory="Yes"),
    
    data.frame(
      Variable="SourceRecordSpecimenOriginalQuantity",
      Label="Original quantity", 
      Definition="The original quantity of specimen",
      Type="Float",
      Mandatory="Yes"),
    
    data.frame(
      Variable="SourceRecordSpecimenOriginalQuantityUnit",
      Label="Quantity unit", 
      Definition="The unit of the original quantity",
      Type="String",
      Mandatory="Yes"),
    
    data.frame(
      Variable="SourceRecordSpecimenQuantityStored",
      Label="Quantity stored", 
      Definition="The amount of specimen currently stored",
      Type="Float",
      Mandatory="Yes"),  
    
    data.frame(
      Variable="SourceRecordSpecimenReasonQuantityDifference",
      Label="Reason for quantity difference", 
      Definition="The explanantion for the difference between the original specimen amount and the stored specimen amount",
      Type="String",
      Mandatory="Yes, if 'Quantity stored' and 'Quantity difference' are different"),
    
    data.frame(
      Variable="WildlifeHealth_SourceRecordSpecimenFieldStorage",
      Label="Field storage", 
      Definition="The method to store the specimen in the field while in transit to a proper facility",
      Type="String",
      Mandatory="Yes"),
    
    data.frame(
      Variable="WildlifeHealth_SourceRecordSpecimenLabStorage",
      Label="Laboratory storage", 
      Definition="The method to store the specimen in the laboratory",
      Type="String",
      Mandatory="Yes"),
    
    data.frame(
      Variable="SourceRecordSpecimenInContainer",
      Label="Specimen container", 
      Definition="Answer to the question: 'Is the specimen stored in a container mixed with other specimens?'",
      Type="Boolean",
      Mandatory="Yes"),
    
    data.frame(
      Variable="SourceRecordSpecimenContainerCode",
      Label="Container label", 
      Definition="The container with the current specimen and other specimens",
      Type="String",
      Mandatory="Yes, but this field becomes available to complete when the previous field is TRUE"),

    data.frame(
      Variable="WildlifeHealth_SourceRecordSpecimenLocation",
      Label="Location", 
      Definition="The institution where the specimen is currently stored",
      Type="Single selection",
      Mandatory="Yes"),
    
    data.frame(
      Variable="WildlifeHealth_SourceRecordSpecimenBuilding",
      Label="Building", 
      Definition="The specific building within the institution where the specimen is located",
      Type="Single selection",
      Mandatory="Yes"),
    
    data.frame(
      Variable="SourceRecordSpecimenRoom",
      Label="Room", 
      Definition="The specific room within the building where the specimen is located",
      Type="String",
      Mandatory="Yes"),
    
    data.frame(
      Variable="SourceRecordSpecimenStorage",
      Label="Storage", 
      Definition="The specific unit within the room (e.g., refrigerator) where the specimen is located",
      Type="String",
      Mandatory="Yes"),
    
    data.frame(
      Variable="SourceRecordSpecimenShelf",
      Label="Shelf", 
      Definition="The specific shelf within the unit (e.g., refrigerator) where the specimen is located",
      Type="String",
      Mandatory="No"),
    
    data.frame(
      Variable="SourceRecordSpecimenRack",
      Label="Rack", 
      Definition="The specific rack within the shelf where the specimen is located",
      Type="String",
      Mandatory="No"),
    
    data.frame(
      Variable="SourceRecordSpecimenBox",
      Label="Box", 
      Definition="The specific box of the rack where the specimen is located",
      Type="String",
      Mandatory="No"),
    
    data.frame(
      Variable="SourceRecordSpecimenRow",
      Label="Row", 
      Definition="The specific row of the box where the specimen is located",
      Type="String",
      Mandatory="No"),
    
    data.frame(
      Variable="SourceRecordSpecimenAvailable",
      Label="Specimen available", 
      Definition="Answer to the question:'Is the specimen available for testing or shipping?'",
      Type="Boolean",
      Mandatory="Yes"),
    
    data.frame(
      Variable="SourceRecordSpecimenOwner",
      Label="Specimen owner", 
      Definition="The organization or individual that owns the specimen",
      Type="String",
      Mandatory="Yes"),
    
    data.frame(
      Variable="SourceRecordSpecimenComments",
      Label="Comments", 
      Definition="Any comments regarding the specimen",
      Type="String",
      Mandatory="No"),
    
    data.frame(
      Variable="WildlifeHealth_SurveillanceObjective",
      Label="Surveillance objective", 
      Definition="The surveillance objectives that the source record is part of",
      Type="Mutiple selection",
      Mandatory="Yes"))

#Specimen diagnostic

data_dictionary[["Source_Record_Specimen_Diagnostic"]]<-
  
  list(    
    
    data.frame(
      Variable="WildlifeHealth_SourceRecordSpecimenDiagnosticID",
      Label="Diagnostic identifier", 
      Definition="System-provided diagnostic identifier",
      Type="Integer",
      Mandatory="System-assigned"), 
    
    data.frame(
      Variable="SourceRecordSpecimenDiagnosticWithinLabCode",
      Label="Laboratory diagnostic identifier", 
      Definition="System-provided diagnostic identifier",
      Type="String",
      Mandatory="Yes"),   
    
    data.frame(
      Variable="WildlifeHealth_SourceSpecimenDiagnosticTargetedHazardType",
      Label="Diagnostic hazard type", 
      Definition="The general type of health hazard targeted by the diagnostic (e.g., 'Biological', 'Chemical', 'Physical', 'Physiological')",
      Type="Single selection",
      Mandatory="Yes"),
    
    data.frame(
      Variable="WildlifeHealth_SourceSpecimenDiagnosticTargetedHazardName",
      Label="Specific health hazard targeted",
      Definition="The specific health hazard targeted by the diagnostic (e.g., 'coronaviridae', 'Brucella abortus')" ,
      Type="Single selection",
      Mandatory="Yes. Options available are conditional on the health hazard types selected"),
    
    data.frame(
      Variable="WildlifeHealth_SourceSpecimenDiagnosticTargetedHazardName",
      Label="Specific health hazard targeted",
      Definition="The specific health hazard targeted by the diagnostic (e.g., 'coronaviridae', 'Brucella abortus')" ,
      Type="Single selection",
      Mandatory="Yes. Options available are conditional on the health hazard types selected"),
    
    data.frame(
      Variable="WildlifeHealth_LaboratoryID",
      Label="Laboratory identifier", 
      Definition="System-provided laboratory identifier",
      Type="Integer",
      Mandatory="System-assigned"), 
    
    data.frame(
      Variable="WildlifeHealth_DiagnosticMethod",
      Label="Diagnostic method", 
      Definition="The general method used to conduct the diagnostic (e.g., 'histopathology', 'molecular diagnostics', etc)",
      Type="Single selection",
      Mandatory="Yes"),

    data.frame(
      Variable="WildlifeHealth_DiagnosticType",
      Label="Diagnostic type",
      Definition="The general method used to conduct the diagnostic (e.g., 'immunofluorescence', 'PCR', etc)",
      Type="Single selection",
      Mandatory="Yes"),
    
    data.frame(
      Variable="SourceRecordSpecimenDiagnosticDateSentForTesting",
      Label="Date sent for testing",
      Definition="The date the diagnostic was requested",
      Type="Date",
      Mandatory="Yes"),
    
    data.frame(
      Variable="SourceRecordSpecimenDiagnosticResultsReceived",
      Label="Results received",
      Definition="Answer to the question: 'Have the diagnostic results been received?'",
      Type="Boolean",
      Mandatory="Yes"),
    
    data.frame(
      Variable="SourceRecordSpecimenDiagnosticDateResultsReceived",
      Label="Date results received",
      Definition="The date the diagnostic results were received",
      Type="Date",
      Mandatory="Yes, but this field becomes available only when 'Results received' is True"),
    
    data.frame(
      Variable="WildlifeHealth_SourceRecordSpecimenDiagnosticResult",
      Label="Diagnostic result",
      Definition="The result of the diagnostic",
      Type="Single selection",
      Mandatory="Yes, but this field becomes available only when 'Results received' is True"),
    
    data.frame(
      Variable="SourceRecordSpecimenDiagnosticResultModified",
      Label="Diagnostic result modified",
      Definition="Answer to the question:'Have the results been modified?'",
      Type="Boolean",
      Mandatory="Yes, but this field becomes available only when 'Results received' is True"),
    
    data.frame(
      Variable="SourceRecordSpecimenDiagnosticDateResultModified",
      Label="Date diagnostic result modified",
      Definition="The date when the diagnostic results was modified",
      Type="Date",
      Mandatory="Yes, but this field becomes available only when 'Results received' is True"),
    
    data.frame(
      Variable="SourceRecordSpecimenDiagnosticReasonResultModified",
      Label="Reason diagnostic result modified",
      Definition="The reason explaining the diagnostic result modification",
      Type="String",
      Mandatory="Yes, but this field becomes available only when 'Diagnostic result modified' is True"),
    
    data.frame(
      Variable="SourceRecordSpecimenDiagnosticComments",
      Label="Diagnostic comments",
      Definition="Any comments regarding the diagnostic",
      Type="String",
      Mandatory="No"),
    
    data.frame(
      Variable="SourceRecordSpecimenDiagnosticSupportingInformation",
      Label="Supporting information",
      Definition="Any supporting information regarding the diagnostic",
      Type="String",
      Mandatory="No"),
    
    data.frame(
      Variable="WildlifeHealth_SurveillanceObjective",
      Label="Surveillance objective", 
      Definition="The surveillance objectives that the diagnostic is part of",
      Type="Mutiple selection",
      Mandatory="Yes"))

#Laboratory

data_dictionary[["Laboratory"]]<-
  
  list(   

    data.frame(
      Variable="LabName",
      Label="Laboratory name",
      Definition="The name of the laboratory",
      Type="String",
      Mandatory="Yes"),
  
    data.frame(
      Variable="WildlifeHealth_LabCountryID",
      Label="Laboratory country",
      Definition="The country of the laboratory",
      Type="Single selection",
      Mandatory="Yes"),
    
    data.frame(
      Variable="LabAddress",
      Label="Laboratory address",
      Definition="The address of the laboratory",
      Type="String",
      Mandatory="No"),
    
    data.frame(
      Variable="LabManager",
      Label="Laboratory manager",
      Definition="The manager of the laboratory",
      Type="String",
      Mandatory="No"),
    
    data.frame(
      Variable="LabManagerEmail",
      Label="Laboratory manager email",
      Definition="The email address of the manager of the laboratory",
      Type="String",
      Mandatory="No"),
    
    data.frame(
      Variable="LabPointContactName",
      Label="Laboratory contact",
      Definition="The name of the best contact point for the laboratory",
      Type="Multiple selection",
      Mandatory="Yes"),
    
    data.frame(
      Variable="LabPointContactEmail",
      Label="Laboratory contact email",
      Definition="The email address of the best contact point for the laboratory",
      Type="String",
      Mandatory="Yes"),
    
    data.frame(
      Variable="LabPointContactAffiliation",
      Label="Laboratory contact affiliation",
      Definition="The affiliation of the best contact point for the laboratory",
      Type="String",
      Mandatory="No"),
    
    data.frame(
      Variable="WildlifeHealth_LabDiagnosticMethodAvailable",
      Label="Diagnostics available",
      Definition="The diagnostic methods available in the laboratory",
      Type="Multiple selection",
      Mandatory="Yes"),
    
    data.frame(
      Variable="WildlifeHealth_LabMaxBiosafetyLevel",
      Label="Maximum biosafety level",
      Definition="The maximum biosafety level avalable in the laboratory",
      Type="Single selection",
      Mandatory="Yes"),
    
    data.frame(
      Variable="WildlifeHealth_LabCertification",
      Label="Certifications",
      Definition="The certifications accomplished by the laboratory",
      Type="Multiple selection",
      Mandatory="Yes"),
    
    data.frame(
      Variable="LabStorageCapacity",
      Label="Storage capacity",
      Definition="The capacity of the laboratory to store specimens",
      Type="String",
      Mandatory="Yes"),
    
    data.frame(
      Variable="LabDataManagementSystem",
      Label="Information system",
      Definition="The information system used in the laboratory to track diagnositci information",
      Type="String",
      Mandatory="Yes"))
    
        
# map(data_dictionary, \(x) do.call(rbind,x)) %>% list_rbind()
    
data_dictionary<-map(data_dictionary, \(x) do.call(rbind,x)) 

for(i in seq_along(data_dictionary)){
  data_dictionary[[i]]$Component<-names(data_dictionary[i])}

data_dictionary<-data_dictionary %>% 
  list_rbind() %>% 
  select(Component, Variable, Label, Definition, Type, Mandatory)

# need to find how to change the font size to improve the column width

  # kableExtra::kable(data_dictionary, booktabs = TRUE)%>%
  # kable_styling(bootstrap_options = c("basic"), font_size = 2) %>% 
  #   kableExtra::column_spec(column = 1:5, border_right = T) 

  data_dictionary %>%
  gt::gt() %>%
  gt::tab_options(table.font.size = 9) %>%
  gt::cols_width(Variable ~ gt::pct(5),
                 Label ~ gt::pct(20),
                 Definition ~ gt::pct(25),
                 Type~ gt::pct(25),
                 Mandatory~ gt::pct(25)) %>%
  gt::tab_style(
  style = cell_text(size = px(16), weight = "bold"),
  locations = cells_column_labels())
 

# write_csv(data_dictionary, file = "data_dictionary_June_30_2023.csv")

```
