# WHeDB Manual {.unnumbered}


```{r, echo=FALSE}


# htmltools::div(
#   htmltools::img(src = knitr::image_uri("Pictures_and_diagrams/WHINlogo.png"),
#                  alt = 'logo', 
#                  style = 
#                  "position: fixed; 
#                  right: 10px; 
#                  top: 0%; 
#                  width: 220px;"),
#   htmltools::img(src = knitr::image_uri("Pictures_and_diagrams/WCS_LOGOTYPE.png"), 
#                  style = "position: fixed; right: 10px; top: 13%; width: 200px;"),
#   htmltools::img(src = knitr::image_uri("Pictures_and_diagrams/wcpa-logo.png"), 
#                  style = "position: fixed; right: 10px; top: 20%; width: 200px;")

htmltools::div(
  htmltools::a(
    href = "https://www.whin.org", target = "_blank",
    htmltools::img(src = knitr::image_uri("Pictures_and_diagrams/WHINlogo.png"),
                   alt = 'WHIN logo',  
                   style = "position: fixed; right: 10px; top: 0%; width: 220px;")
  ),
  htmltools::a(
    href = "https://www.wcs.org", target = "_blank",
    htmltools::img(src = knitr::image_uri("Pictures_and_diagrams/WCS_LOGOTYPE.png"),
                   alt = 'WCS logo',  
                   style = "position: fixed; right: 10px; top: 13%; width: 200px;")
  ),
  htmltools::a(
    href = "https://www.iucn.org/our-union/commissions/world-commission-protected-areas", target = "_blank",
    htmltools::img(src = knitr::image_uri("Pictures_and_diagrams/wcpa-logo.png"),
                   alt = 'WCPA logo',  
                   style = "position: fixed; right: 10px; top: 20%; width: 200px;")
  ),
  htmltools::a(
    href = "https://snappartnership.net/", target = "_blank",
    htmltools::img(src = knitr::image_uri("Pictures_and_diagrams/snapp-logo-250.png"),
                   alt = 'SNAPP logo',  
                   style = "position: fixed; right: 0px; top: 40%; width: 200px; background-color: black;")
  )
)


```

## The WildHealth Database – WHeDB

WHeDB stands for “WildHealth Database” and it is a user-friendly web-based database designed to manage wildlife health data.  Data in WHeDB are structured following a versatile data model created by Data Task Force within the Wildlife Health Intelligence Network (WHIN), a global community of practice for growing wildlife health surveillance. WHeDB can effectively manage data generated by wildlife health surveillance systems, research, and public initiatives under one structure. Examples include typical morbidity/mortality investigations, opportunistic findings such as reports of dead animals by the public or in social media; testing of samples from captured, marked, and recaptured animals; multilevel study designs; and transect survey observations among others. WHeDB is maintained by Wildlife Conservation Society’s Health Program and Conservation Technology, based in Bronx, New York, United States. 

In this manual, In this manual, we Capitalize and **bold** nouns such as **Projects**, **Surveillance Activities**, **Field Visits**, **Locations**, **Events**, **Sources**, and **Specimens**, and others when they refer to specific WHeDB units. 

**This manual focuses on general user functionalities. To learn more about administrator account functionalities, refer to the “WHeDB Administrator Account Manual”.**

This manual can also be found online [link](https://dmontecino.github.io/WH_Database/manual.html).

## Structure of the Wildlife Health Data in WHeDB

This manual provides a summary of the data structure in WHeDB. For a full description, visit the website describing the data model [link](https://dmontecino.github.io/WH_Database/data_model.html). Briefly, WHeDB has **Projects** that identify a specific project leader and information. Under **Projects** are **Surveillance Activities** that are executed following a methodology documented in a standard metadata format. **Surveillance Activities** are conducted through **Field Visits** that encompass a time period during which **Locations** (i.e. study sites) are surveyed. These **Locations** contain **Events**, epidemiological units with a spatiotemporal coordinate that can contain four types of **Sources**: groups of animals of the same species (**Group**), individual animals (**Animal**), collections of arthropods (**Arthropod**), or environmental observations and sample collection (e.g., water or feces; **Environmenta**l). **Sources** at time *t* are **Source Records** that can be obtained through a **Collection** that involves an effort to obtain information during an Event (i.e. mist net) or not. **Locations**, **Events**, and **Sources** can be grouped in further temporal and spatial **Clusters** when needed, based on the specific requirements of a study design. What **Location**, **Event**, and other **Cluster** units represent can vary for each **Surveillance Activity** but they must remain constant for each one of them and be documented. The four categories of **Sources** can provide **Specimens** cross-sectionally or longitudinally. **Necropsy** of animal carcasses can be documented. Live or dead **Animals** and **Specimens** can be tested using **Diagnostics** for biological (i.e. pathogens), physical (heat stroke), chemical (i.e. heavy metals), and physiological (i.e. cardiomegaly) targets. **Diagnostics** can be conducted in a **Laboratory**. **Specimens** and **Diagnostics** can generate new **Specimens** if they are pooled or if their products are used in subsequent tests, respectively. Finally, each **Diagnostic**, tested **Specimen**, and tested **Source** (directly or through **Specimens**) receives an **Interpretation** (diagnosis) for the target of interest following documented case definitions. The data model also supports the administration of stored and exported **Specimens** and carcasses.




![](Pictures_and_diagrams/Manual_pictures/Picture11.png){width=100%}
Figure 1. Basic structure of the Wildlife Health Intelligence Network (WHIN) data model.


Depending on the study design, **Surveillance Activities** may only contain **Field Visits** up to **Source Records** only (i.e. mortality observations). It is also possible that a **Surveillance Activity** contains **Specimens** and **Diagnostics** only or **Source Records**, **Specimens**, and **Diagnostics** only. In the first case, stored **Specimens** collected under a previous **Surveillance Activity** are used in a second **Surveillance Activity** and tested for health hazards. In the second case, a stored carcass collected under a previous **Surveillance Activity** generates new **Specimens** that are tested for health hazards. For other potential options please visit this website [link](https://dmontecino.github.io/WH_Database/data_model.html#surveillance-activities). The full set of relationships among these entities are provided [online](https://dmontecino.github.io/WH_Database/data_model.html#all-units-in-the-data-model-and-all-relationships).

We encourage a modular approach to implementing WHeDB, so that components are added to a basic frame as needed depending on the methods employed.  

## Organization and Administrator and User Accounts

### Organization Account

WHeDB compartmentalizes data in independent and password secured **Organization** accounts that belong to a specific **Organization** or to a specific individual. New **Organization** accounts must be requested to the database administrators. Created **Organization** accounts are assigned an administrator as requested to the WHeDB administrators. 

### Administrator Account

Administrators of **Organization** accounts are in charge of the administration of **Organization** accounts. They receive the requests of other users access the corresponding Organization account and they approve or reject such requests. **Organization** account administrators define permits of users (view, edit, delete by **Surveillance Activity**) and “**Project** Creation” permissions (see below). They can also establish other account administrators and are the only individuals that can reach WHeDB general administrators. 

### User Account

User accounts are independent, and password secured. They belong to a specific individual. New user accounts are requested to **Organization** account administrators. User accounts obtain view, edit, delete permissions per **Surveillance Activity** within the **Organization** Account. Users can also receive “**Project** Creation” permissions. 

## Accessing the WildHealth Database

### Create an Organization Account

The first step to begin using WHeDB is to request an **Organization** account. All data associated with **Organization** accounts remain independent from other **Organizations** that also use WHeDB. To request an **Organization** account, please click on XXX and complete the form. The individual requesting the **Organization** account will be contacted via email as soon as possible. 

**WHeDB is designed to remain accessible and sustainable as a public good to encourage its use. Critically, when local funding is unavailable, Global South users will be accommodated at no charge, subject to reasonable usage limits. Global South users with funding are encouraged to share their capacity to support database maintenance and ensure the long-term use and storage of data.**

An administrator will be assigned to the **Organization** account based on the information provided in the form. After the **Organization** account is created, the administrator will have the ability to grant access to specific user accounts and assign roles (see above).  

### Change an Organization Administrator Account

Instructions on how to change the **Organization** account administrator are given in **WHeDB Administrator Account Manual** (here; under construction). 

### Create a User Account 

To request a user account for a specific **Organization** account, the requesting individual has to contact the corresponding **Organization** account administrator by completing the form here **XXXX**. The user will get an email with the subject “WHeDB Organization Access Request Confirmation”. Once approved by the administrator, the new user will receive a second email later with the subject “Your Access to the [name of the Organization] WHeDB Account Has Been Accepted”. This second email confirms the account is ready to be used.  

### Access to Organization Accounts

Access to **Organization** accounts is restricted. Users must be authorized by an **Organization** account administrator to gain access. 

The administrator of an **Organization** account will establish specific permissions for each user. Authorized users can be granted different permissions to view, upload, edit, or delete different data in specific units of the **Organizatio**n Account, from **Projects** to **Interpretations**. Therefore, user accounts can be granted data viewing permissions for Project A; not have access to Project B data; and have view, edit, and delete data permissions in Project C.  

Details on **Project**-, Unit-, and permit-specific authorizations made by **Organization** account administrators are given in **WHeDB Administrator Account Manual** (here; *under construction*)

*Under construction* 

### Logging in to the Web-based User Interface

To access WHeDB, administrators and approved users access WHeDB by opening **XXXX** on a web browser, (note that the software is optimized for Chrome and may not work on other browsers), and providing their username and password (see below).  

*Under construction*

# General Users Navigating the WildHealth Database

## Initial Screen

Once the user has logged in, the Graphical User Interface (GUI) has two panels that are **always available**. On the left side of the screen, the GUI has a **Navigation Panel**:

![](Pictures_and_diagrams/Manual_pictures/Initial_screen.png){width=100%}

On the right side is the **Workspace** (green frame in the image below):

![](Pictures_and_diagrams/Manual_pictures/workspace.png){width=100%}

The relative size of the **Navigation Panel** and **Workspace** panels can be adjusted by clicking on divider bar separating the two areas (red frame in the figure below) and dragging it to the left or right. Compare the two images below

![](Pictures_and_diagrams/Manual_pictures/initial_screen_2.png){width=100%}


![](Pictures_and_diagrams/Manual_pictures/initial_screen_3.png){width=100%}


Horizontal and vertical scroll bars appear to aid independent navigation of the **Navigation** Panel, and the **Workspace**. 

## The Navigation Panel

The Navigation Panel has a tree hierarchy. This tree begins with a display of the Organizations to which a specific user has access. Within, each Organization has a Projects folder that contains the Projects belonging to the corresponding Organization. Each Project contains a Surveillance Activities folder that contains the Surveillance Activities of each Project. The tree continues with each Surveillance Activity containing a Field Visits folder, each Field Visit containing a Locations folder, an Event folder nested in each Location, etc. following the structure of the data explained above. 

The number in parenthesis at the right of each folder name indicates the number of units included. For example, “Projects (2)” label indicates that the “Projects” folder contains two Project units (see image below). The “+” icon to the right of each folder in the Navigation Panel indicates that the contents of the folder are not displayed. To open the content of the folders, the user selects the folder icon. When the folder is opened, the “+” icon switches to a “-“ icon, and the contents are displayed: 

![](Pictures_and_diagrams/Manual_pictures/navigation_panel_1.png){width=100%}
Similarly, to reveal folders under a specific data unit, the user selects the “+” icon. The icon switches to a “-“ icon and contents are displayed: 

![](Pictures_and_diagrams/Manual_pictures/navigation_panel_2.png){width=100%}

After clicking on a data unit of any folder in the **Navigation Panel**, the “Details”, “Files”, and “Map and Table” tabs will become available in the **Workspace**. The content in the tab “Details” will be available first by default.

## The Workspace - Details Tab

The “Details” tab contains the variables that characterize each unit. They are empty for new units or filled for previously created units (red frame below): 

![](Pictures_and_diagrams/Manual_pictures/details_tab.png){width=100%}
Users can navigate across the this tab by scrolling up and down and place the cursor in a specific field. Fields can be active if their box to complete them is open to be modified. If fields are not active, they will have a grey color and cannot be edited (read only). This can happen when the user does not have editing permissions (see *"XXX"*) or because the responses in previous fields keep subsequent fields inactive (i.e., if a Project does not have chemical hazards, then it is not possible to select a specific toxin. See “Mandatory and Conditional Fields” below).

The fields are numbered based on a logical flow and the order is maintained when the area of the **Workspace** is modified. Compare the two images below: 

![](Pictures_and_diagrams/Manual_pictures/numbered_fields_1.png){width=100%}
![](Pictures_and_diagrams/Manual_pictures/numbered_fields_2.png){width=100%}

Guidance to create a data unit (**Project**, **Surveillance Activity**, **Field Visit**, etc.) and complete the information in the “Details” tab is given in the “Add data in WHeDB” section. To edit and delete data of a unit in the “Details” tab, see section *XX* and section *XX*, respectively. 

## The Workspace - Files Tab

To access the “Files” tab, users have to click on it. The “Files” tab can receive and store files associated with the  currently open data unit. WHeDB supports may file extensions (images, pictures, videos, pdf, docx, xlsx, csv, json, shp, etc). The “Files” tab has a list of the files stored in each data unit in the “Uploaded Files” section (blue frame in the image below), a “Drag and drop” area to upload files (green frame in the image below) associated with the corresponding data unit, and a "Preview" tool to visualize in real-time the files uploaded and stored in each data unit (black frame in the image below). The list of files will be empty if there are no files associated with the data unit and the preview tool will not show any content.

![](Pictures_and_diagrams/Manual_pictures/files_tab_1.png){width=100%}
The area of the "Uploaded Files" list and the area of the "Preview" tool can be modified by clicking on the bar separating them and dragging the bar to the left or right. Compare the images below: 

![](Pictures_and_diagrams/Manual_pictures/files_tab_2.png){width=100%}
![](Pictures_and_diagrams/Manual_pictures/files_tab_3.png){width=100%}
To add files to a specific unit see the “Add Data in WHeDB” section. To view files of a specific unit see the “View Data in WHeDB” section. To delete files of a specific unit files see the “Delete Data in WHeDB” section.

## The Workspace - Map and Table Tab

To access the “Map and Table” tab, users have to click on it. This tab shows the spatial information of the data units and the contextual data in a tabular form. For a **Project**, the map shows all its **Events** across all its **Surveillance Activities**, **Locations**, and **Field Visits**. The table in this case shows the *Project ID* and the corresponding *Surveillance Activity IDs*. The data in this tab is only for visualization purposes and cannot be modified. The content of the map and the table changes based on the data provided in the “Details” tab of the current data unit, the data unit parents and children. For example, the tabular data at the **Specimens** level include the IDs of its parents: the *Project ID*, *Surveillance Activity ID*, *Field Visit ID*, *Location ID*, *Collection ID*, *Event ID*, and *Source Record ID*. It also shows the *Specimen ID*; and finally, its children, *Diagnostics ID*. The specific content displayed for each unit is shown in the table below:


```{r table, eval=TRUE, echo=FALSE, message=FALSE, warning=FALSE}
#| tbl-cap: Column headers per data unit in the "Maps and Table" Tab

library(flextable)

#Project Columns: 

proj_col<-c("Project ID", 
            "Project Name", 
            "Surveillance Activity Names")

#Surv activity Columns: 
surv_act_col<-c("Project ID",
                "Project Name",
                "Surveillance Activity ID",
                "Surveillance Activities Name",
                "Field Visit Names")

field_visit_col<-c("Project Name",
                   "Surveillance Activity Name",
                   "Field Visit ID",
                   "Field Visit Name",
                   "Field Visit Star Date",
                   "Field Visit End Date",
                   "Location Cluster Names
                   ",
                   "Location Names")

location_col<-c("Project Name",
                "Surveillance Activity Name",
                "Field Visit Name",
                "Location Cluster Names",
                "Location ID",
                "Location Name",
                "Event Cluster Names",
                "Event IDs")

event_col <- c("Project Name",
                "Surveillance Activity Name",
                "Field Visit Name",
                "Location Cluster Names",
                "Location Name",
                "Event Cluster Names",
                "Event ID",
                "Event Date",
                "Collection IDs",
                "Source IDs")

collection_col <- c("Project Name",
                    "Surveillance Activity Name",
                    "Field Visit Name",
                    "Location Cluster Names",
                    "Location Name",
                    "Event Cluster Names",
                    "Event ID",
                    "Event Date",
                    "Collection ID",
                    "Collection Method",
                    "Source IDs")

source_record_col <- c("Project Name",
                    "Surveillance Activity Name",
                    "Field Visit Name",
                    "Location Cluster Names",
                    "Location Name",
                    "Event Cluster Names",
                    "Event ID",
                    "Event Date",
                    "Collection ID",
                    "Source ID",
                    "Source Type",
                    "Source Record Cluster Names",
                    "Record Number",
                    "Initial Health Status",
                    "Necropsy ID",
                    "Specimen IDs",
                    "Specimen Type")

specimen_col <- c("Project Name",
                    "Surveillance Activity Name",
                    "Field Visit Name",
                    "Location Cluster Names",
                    "Location Name",
                    "Event Cluster Names",
                    "Event ID",
                    "Event Date",
                    "Collection ID",
                    "Source ID",
                    "Source Type",
                    "Source Record Cluster Names",
                    "Record Number",
                    "Specimen ID",
                    "Specimen Type",
                    "Diagnostic IDs",
                    "Diagnostic Targeted Hazard",
                    "Diagnostic Result")

diagnostic_col <- c("Project Name",
                    "Surveillance Activity Name",
                    "Field Visit Name",
                    "Location Cluster Names",
                    "Location Name",
                    "Event Cluster Names",
                    "Event ID",
                    "Collection ID",
                    "Source ID",
                    "Source Type",
                    "Source Record Cluster Names",
                    "Record Number",
                    "Specimen ID",
                    "Diagnostic IDs",
                    "Diagnostic Targeted Hazard",
                    "Diagnostic Result", 
                    "Diagnostic Date Sent",
                    "Diagnostic Date Received",
                    "Diagnostic Result")



# Define the data with nested lists
nested_data <- tibble::tibble(
  Unit = c("Project", 
               "Surveillance Activity", 
               "Field Visit", 
               "Location", 
               "Event", 
               "Collection", 
               "Source Record", 
               "Specimen", 
               "Diagnostics"),
  Columns = list(
    proj_col, 
    surv_act_col, 
    field_visit_col, 
    location_col, 
    event_col, 
    collection_col, 
    source_record_col, 
    specimen_col, 
    diagnostic_col
  )
)

# Print the nested data frame

# library(knitr)
# library(kableExtra)

unnested_data <-
  nested_data|> 
  tidyr::unnest(Columns) 
  
temp<-
  flextable(unnested_data) |> 
  merge_v(j="Unit") |> 
  theme_box() |> 
  width(j = "Unit", width=7, unit = "cm") |> 
  width(j = "Columns", width=10, unit = "cm")



temp
```


*Under construction*

<!-- The Field Visit requires an end date which can be placed in the future. For example, a Surveillance Activity aims to assess the body condition of a herd on a yearly for a decade. In this case, each Field Visit can encompass each full year, with an assigned start date of January 1st and en date December 31st of the corresponding year. The end date can be assigned in any moment before December 31st during the year, when the Field Visit is created. -->

<!-- ### 1. Finding Data  -->

<!-- #### Finding a Project -->
<!-- #### Finding a Surveillance Activity -->
<!-- #### Finding a Field Activity  -->
<!-- #### Finding a Location -->
<!-- #### Finding a Location Group -->
<!-- #### Finding an Event -->
<!-- #### Finding an Event Group -->
<!-- #### Finding a Source  -->
<!-- #### Finding a Source Record -->
<!-- #### Finding a Source Record Group -->
<!-- #### Finding a Carcass -->
<!-- #### Finding a Necropsy -->
<!-- #### Finding a Specimen -->
<!-- #### Finding a Diagnostic -->
<!-- #### Finding a Diagnosis -->
<!-- #### Finding a Laboratory -->
<!-- #### Finding a Person -->

<!-- ### 2. Writing data -->

<!-- #### Creating a new Project -->



<!-- ### 3. Export Data -->

# Appendices

### Summary of fields and tables whose availability is conditional on other fields of the database

```{r child="conditional_attrs.qmd" , echo=FALSE, eval=F, message=FALSE, cache=F}

```

